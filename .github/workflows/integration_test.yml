
name: integration-test
on:
  push:
    branches:
      - integration-test

jobs:
  integration:
    runs-on: ubuntu-latest
    env:
      LOCALSTACK_API_KEY: ${{ secrets.LOCALSTACK_API_KEY }}
      DNS_ADDRESS: 127.0.0.1
    steps:
      - name: Checkout Branch
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup terraform
        uses: hashicorp/setup-terraform@v2

      - name: Start LocalStack
        run: |
          pip install localstack terraform-local    # install LocalStack cli and terraform-local
          docker pull localstack/localstack-pro     # Make sure to pull the latest version of the image

          localstack start -d                       # Start LocalStack in the background
          
          echo "Waiting for LocalStack startup..."  # Wait 30 seconds for the LocalStack container
          localstack wait -t 30                     # to become ready before timing out 
          echo "Startup complete"          

      - name: Terraform apply
        run: |
          cp ./.github/integration_test.tfvars /tmp/integration_test.tfvars

          BRANCH=`git rev-parse --abbrev-ref HEAD`
          CODEDEPLOY_COMMIT_HASH=`git log --grep="CodeDeploy" --format='%H'`

          for COMMIT_HASH in $(git rev-list --reverse $BRANCH)
          do
            git checkout -f $COMMIT_HASH

            if $COMMIT_HASH == $CODEDEPLOY_COMMIT_HASH; then
              echo "LocalStack doesn't support CodeDeploy so skipping the commit"
              continue
            fi

            if [ -f "my_project/.infrastructure/workspaces/default/version.tf" ]; then
              GIT_MESSAGE=`git show --oneline -s`
              echo "Testing $GIT_MESSAGE"

              if [ -f "my_project/.infrastructure/workspaces/default/code_deploy.tf" ]; then
                echo "LocalStack doesn't support CodeDeploy so reverting the commit"
                git revert --no-commit $CODEDEPLOY_COMMIT_HASH
              fi

              if [[ $GIT_MESSAGE =~ "Make Github Actions trigger deployment" ]] || [[ $GIT_MESSAGE =~ "Monolith with secondary port deployment strategy" ]]; then
                echo "LocalStack has issues with continuing TF apply with this commit so we'll reset the TF env"
                localstack stop
                localstack start -d
                localstack wait -t 30
                rm my_project/.infrastructure/workspaces/default/terraform.tfstate
              fi

              cd my_project/.infrastructure/workspaces/default
              tflocal init
              tflocal apply -var-file=/tmp/integration_test.tfvars --input=false --auto-approve
              cd ../../../../
            fi
          done

      - name: Setup Elixir
        uses: erlef/setup-beam@v1
        with:
          otp-version: 25.0
          elixir-version: 1.14

      - name: Prepare Phoenix app
        run: |
          echo "y" | mix archive.install hex phx_new
          echo "y" | mix phx.new my_project --install
          cd my_project

          mix phx.gen.release --docker
          mkdir .release
          mv .dockerignore Dockerfile ./.release/

          <<'SH' > .release/entrypoint.sh
          bin/my_project eval "MyProject.Release.migrate()"
          bin/my_project start
          SH

      - name: Manual changes to Phoenix app
        run: |
          # Set up DB credentials config
          RUNTIME_CONFIG_MATCH='import Config'
          RUNTIME_CONFIG_DB_CREDENTIALS='
          # AWS RDS rotation requires us to store db credentials in a specific format
          # in Secrets Manager so we will build the DSN here
          if credentials = System.get_env("DATABASE_CREDENTIALS") do
            %{
              "engine" => engine,
              "host" => host,
              "username" => username,
              "password" => password,
              "dbname" => dbname,
              "port" => port
            } = Jason.decode!(credentials)

            dsn = "#{engine}://#{URI.encode_www_form(username)}:#{URI.encode_www_form(password)}@#{host}:#{port}/#{dbname}"

            System.put_env("DATABASE_URL", dsn)
          end
          '

          sed -i "s/$RUNTIME_CONFIG_MATCH/$RUNTIME_CONFIG_MATCH\n\n$RUNTIME_CONFIG_DB_CREDENTIALS\n/" config/runtime.exs

          # Set up libcluster

          RUNTIME_CONFIG_MATCH='import Config'
          RUNTIME_CONFIG_LIBCLUSTER='
          case System.fetch_env("DNS_POLL_QUERY") do
            :error ->
              :ok
            
            {:ok, query} ->
              [node_basename, _host] = String.split(System.fetch_env!("RELEASE_NODE"), "@")

              config :libcluster,
                topologies: [
                  dns: [
                    strategy: Cluster.Strategy.DNSPoll,
                    config: [
                      polling_interval: 1_000,
                      query: query,
                      node_basename: node_basename]]]
          end
          '
          sed -i "s/$RUNTIME_CONFIG_MATCH/$RUNTIME_CONFIG_MATCH\n\n$RUNTIME_CONFIG_LIBCLUSTER\n/" config/runtime.exs
          sed -i "s/{:postgres, /      {:libcluster, \"~> 3.2\"},\n{:postgres, /" mix.exs

      - name: Add RELEASE_NODE variable in entrypoint.sh
        run: |
          mv .release/entrypoint.sh /tmp/entrypoint.sh
          cat - /tmp/entrypoint.sh <<'SH' > .release/entrypoint.sh
          export RELEASE_DISTRIBUTION=name
          export RELEASE_NODE=node-${{ github.sha }}@`curl -s $ECS_CONTAINER_METADATA_URI_V4 | jq -r ".Networks[0].IPv4Addresses[0]"`

          SH

      - name: Build, tag, and push to ECR
        id: docker-build
        uses: docker/build-push-action@v3
        with:
          context: .
          # Replace this if the dockerfile is at a different path
          file: .release/Dockerfile
          push: true
          tags: localhost:4510/my_org/my_project:sha-1

      - name: Setup AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: "arn:aws:iam::000000000000:role/github-actions-ecr-my_org-my_project"
          aws-region: "us-east-1"
          http-proxy: "http://localhost:4566"

      - name: Build ECS task definition
        run: |
          pip install aws-local[ver1]
          awslocal ecs describe-task-definition --task-definition my-project-test-template --query taskDefinition > task-definition.json
          echo "`jq '.family="my-project-test" | .containerDefinitions[0].image="localhost:4510/my_org/my_project:sha-1"' task-definition.json`" > task-definition.json

      - name: Deploy app1
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: task-definition.json
          cluster: my-project-test
          service: my-project-test-app1
          wait-for-service-stability: true