name: CD
on:
  push:
    branches:
      - main

# This is necessary for Github Actions OIDC
permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      aws_region: ${{ vars.AWS_REGION }}
      docker_image: ${{ steps.ecr-login.outputs.registry }}/${{ vars.AWS_ECR_REPO }}@${{ steps.docker-build.outputs.digest }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ vars.AWS_BUILD_ROLE }}
          aws-region: ${{ vars.AWS_REGION }}
          mask-aws-account-id: 'no'

      - name: Login to AWS repository
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1

      # The following prepends the .release/entrypoint.sh shell script with RELEASE_NODE env var.
      # Change the path if the entrypoint shell script is located in a different place.
      #
      # Please make sure that `curl` and `jq` is being installed in the release image.
      - name: Add RELEASE_NODE variable in entrypoint.sh
        run: |
          mv .release/entrypoint.sh /tmp/entrypoint.sh
          cat - /tmp/entrypoint.sh <<'SH' > .release/entrypoint.sh
          export RELEASE_DISTRIBUTION=name
          export RELEASE_NODE=node-${{ github.sha }}@`curl -s $ECS_CONTAINER_METADATA_URI_V4 | jq -r ".Networks[0].IPv4Addresses[0]"`

          SH

      - name: Build image metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ steps.ecr-login.outputs.registry }}/${{ vars.AWS_ECR_REPO }}
          # The release will be tagged with the branch and the short git sha (and latest if on main)
          tags: |
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}

      - name: Build, tag, and push to ECR
        id: docker-build
        uses: docker/build-push-action@v3
        with:
          context: .
          # Replace this if the dockerfile is at a different path
          file: .release/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    runs-on: ubuntu-latest
    concurrency: deployment
    env:
      DOCKER_IMAGE: ${{ needs.build.outputs.docker_image }}
    needs:
      - build
    steps:
      - name: Setup AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ vars.AWS_DEPLOY_ROLE }}
          aws-region: ${{ vars.AWS_REGION }}

      # This will download the task definition template managed by Terraform
      # and modify the family and image attributes.
      - name: Build ECS task definition
         run: |
           aws ecs describe-task-definition --task-definition ${{ vars.AWS_SERVICE_NAME }}-template --query taskDefinition > task-definition.json
           echo "`jq '.family="${{ vars.AWS_SERVICE_NAME }}" | .containerDefinitions[0].image="${{ env.DOCKER_IMAGE }}"' task-definition.json`" > task-definition.json

      - name: Deploy app1
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: task-definition.json
          cluster: ${{ vars.AWS_SERVICE_NAME }}
          service: ${{ vars.AWS_SERVICE_NAME }}-app1
          wait-for-service-stability: true

      - name: Deploy app2
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: task-definition.json
          cluster: ${{ vars.AWS_SERVICE_NAME }}
          service: ${{ vars.AWS_SERVICE_NAME }}-app2
          wait-for-service-stability: true
